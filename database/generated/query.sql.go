// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (url, status)
VALUES ($1, 'pending')
ON CONFLICT (url) DO NOTHING
RETURNING id
`

func (q *Queries) CreateURL(ctx context.Context, url string) (int32, error) {
	row := q.db.QueryRow(ctx, createURL, url)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getPendingURLs = `-- name: GetPendingURLs :many
SELECT url FROM urls WHERE status = 'pending' LIMIT $1
`

func (q *Queries) GetPendingURLs(ctx context.Context, limit int32) ([]string, error) {
	rows, err := q.db.Query(ctx, getPendingURLs, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var url string
		if err := rows.Scan(&url); err != nil {
			return nil, err
		}
		items = append(items, url)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markURLAsCrawled = `-- name: MarkURLAsCrawled :exec
UPDATE urls
SET status = 'crawled', content = $2, crawled_at = NOW()
WHERE url = $1
`

type MarkURLAsCrawledParams struct {
	Url     string
	Content pgtype.Text
}

func (q *Queries) MarkURLAsCrawled(ctx context.Context, arg MarkURLAsCrawledParams) error {
	_, err := q.db.Exec(ctx, markURLAsCrawled, arg.Url, arg.Content)
	return err
}

const markURLAsFailed = `-- name: MarkURLAsFailed :exec
UPDATE urls
SET status = 'failed', error_message = $2, crawled_at = NOW()
WHERE url = $1
`

type MarkURLAsFailedParams struct {
	Url          string
	ErrorMessage pgtype.Text
}

func (q *Queries) MarkURLAsFailed(ctx context.Context, arg MarkURLAsFailedParams) error {
	_, err := q.db.Exec(ctx, markURLAsFailed, arg.Url, arg.ErrorMessage)
	return err
}

const markURLAsSkipped = `-- name: MarkURLAsSkipped :exec
UPDATE urls SET status = 'skipped', crawled_at = NOW()
WHERE url = $1
`

func (q *Queries) MarkURLAsSkipped(ctx context.Context, url string) error {
	_, err := q.db.Exec(ctx, markURLAsSkipped, url)
	return err
}

const updateURLClassification = `-- name: UpdateURLClassification :exec
UPDATE urls SET classification = $2, confidence = $3 WHERE url = $1
`

type UpdateURLClassificationParams struct {
	Url            string
	Classification pgtype.Text
	Confidence     pgtype.Float4
}

func (q *Queries) UpdateURLClassification(ctx context.Context, arg UpdateURLClassificationParams) error {
	_, err := q.db.Exec(ctx, updateURLClassification, arg.Url, arg.Classification, arg.Confidence)
	return err
}

const updateURLStatus = `-- name: UpdateURLStatus :exec
UPDATE urls SET status = $2 WHERE url = $1
`

type UpdateURLStatusParams struct {
	Url    string
	Status CrawlStatus
}

func (q *Queries) UpdateURLStatus(ctx context.Context, arg UpdateURLStatusParams) error {
	_, err := q.db.Exec(ctx, updateURLStatus, arg.Url, arg.Status)
	return err
}
